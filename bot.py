import time
import requests
import logging
from datetime import datetime, timedelta
from binance.client import Client
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# ====== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ======
BINANCE_API_KEY = "QmlOP0W9qiIqGcNrYuheViqC9Jekp6X3bIMghn6XtbLOYTxKor3J60u5nhzFivnd"
BINANCE_API_SECRET = "k2oIUMOaMFVQBy8Di3rTW1hGQGDGyJMMRTV3D3nyydd9DhmwitbleeMFR7bJkCMq"
TELEGRAM_TOKEN = "8129732857:AAGS1yAqHmEaSS2LiiEsQvKM-Ye86p2oW_I"
TELEGRAM_CHAT_ID = "6913973601"  # ID —á–∞—Ç—É –∫—É–¥–∏ —Å–ª–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏ (–º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ @userinfobot)
DEFAULT_PERCENT_CHANGE = 5  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5%
DEFAULT_TIMEFRAME = 10  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10 —Ö–≤–∏–ª–∏–Ω

client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
last_signals = {}  # –õ–æ–≥ —Å–∏–≥–Ω–∞–ª—ñ–≤ {symbol: count}
user_settings = {}  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ {user_id: {'percent': X, 'time': Y}}

# ====== –õ–û–ì–Ü–ö–ê –ê–ù–ê–õ–Ü–ó–£ –†–ò–ù–ö–£ ======
def get_binance_prices():
    """–û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω–∏ –º–æ–Ω–µ—Ç –∑ Binance."""
    tickers = client.get_ticker()
    return {t["symbol"]: float(t["lastPrice"]) for t in tickers if t["symbol"].endswith("USDT")}

def check_market():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–∏–Ω–æ–∫ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–∏–≥–Ω–∞–ª —É –¢–ì, —è–∫—â–æ —î —Ä—ñ–∑–∫–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è."""
    global last_signals
    current_time = datetime.now()
    
    prices_now = get_binance_prices()
    time.sleep(60)  # –ß–µ–∫–∞—î–º–æ –æ–¥–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    prices_later = get_binance_prices()

    signals_today = sum(last_signals.values())  # –°–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ –¥–æ–±—É

    for symbol, old_price in prices_now.items():
        new_price = prices_later.get(symbol)
        if not new_price:
            continue
        
        percent_change = ((new_price - old_price) / old_price) * 100
        
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        percent_threshold = user_settings.get(TELEGRAM_CHAT_ID, {}).get("percent", DEFAULT_PERCENT_CHANGE)

        if percent_change >= percent_threshold:
            last_signals[symbol] = last_signals.get(symbol, 0) + 1
            signals_today += 1
            
            message = f"üöÄ *–†—ñ—Å—Ç —Ü—ñ–Ω–∏!*\n–ú–æ–Ω–µ—Ç–∞: {symbol}\nüìà –ó–º—ñ–Ω–∞: +{percent_change:.2f}%\n‚è≥ –Ü–Ω—Ç–µ—Ä–≤–∞–ª: 1 —Ö–≤\nüîî –°–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞ –¥–æ–±—É: {signals_today}"
            send_telegram_alert(message)

    # –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤ —â–æ–¥–Ω—è –æ–ø—ñ–≤–Ω–æ—á—ñ
    if current_time.hour == 0 and current_time.minute == 0:
        last_signals.clear()

def send_telegram_alert(message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "Markdown"}
    requests.post(url, data=data)

# ====== –ö–ï–†–£–í–ê–ù–ù–Ø –ß–ï–†–ï–ó TELEGRAM ======
def start(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –º–æ–Ω—ñ—Ç–æ—Ä—é —Ä–∏–Ω–æ–∫ Binance. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏:\n/set_percent X% ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—ñ–≥\n/set_time X—Ö–≤ ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª")

def set_percent(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä–æ–≥—É –≤—ñ–¥—Å–æ—Ç–∫–∞."""
    user_id = update.message.chat_id
    try:
        percent = int(context.args[0].replace("%", ""))
        if 1 <= percent <= 100:
            user_settings[user_id] = user_settings.get(user_id, {})
            user_settings[user_id]["percent"] = percent
            update.message.reply_text(f"‚úÖ –ü–æ—Ä—ñ–≥ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {percent}%")
        else:
            update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 1 –¥–æ 100")
    except (IndexError, ValueError):
        update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_percent 5%")

def set_time(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."""
    user_id = update.message.chat_id
    try:
        minutes = int(context.args[0].replace("—Ö–≤", ""))
        if 1 <= minutes <= 30:
            user_settings[user_id] = user_settings.get(user_id, {})
            user_settings[user_id]["time"] = minutes
            update.message.reply_text(f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {minutes} —Ö–≤")
        else:
            update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 1 –¥–æ 30 —Ö–≤–∏–ª–∏–Ω")
    except (IndexError, ValueError):
        update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_time 10—Ö–≤")

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("set_percent", set_percent))
    dp.add_handler(CommandHandler("set_time", set_time))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, start))  # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤

    updater.start_polling()

    while True:
        check_market()
        time.sleep(60)  # –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ

if __name__ == "__main__":
    main()
